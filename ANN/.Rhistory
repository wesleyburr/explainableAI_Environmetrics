for( i in 1:n1 ){
ID1t <- sample( Let1, 1, replace = TRUE )
ID2t <- sample( Let1, 1, replace = TRUE )
ID3t <- sample( Let1, 1, replace = TRUE )
ID4t <- sample( Let1, 1, replace = TRUE )
ID1[i] <- paste( ID1t, ID2t, ID3t, n01[i], ID4t )
Gender1[i] <- ifelse( i %% 2 ==0, "M","F")
Glucose1[i] <- round( rnorm(1, 150, 10),0)
Glucose2[i] <- round( Glucose1[i] + rnorm(1, 0, 1) - 10*ifelse( Treat1[i] == "Y", 1, 0 ), 0 )
Glucose3[i] <- round( Glucose2[i] + rnorm(1, 0, 1) - 5*ifelse( Treat1[i] == "Y", 1, 0 ), 0 )
}
data1 <- data.frame( ID = ID1, Sex = Gender1, Age = Age, Glucose1 = Glucose1,
Glucose2 = Glucose2, Glucose3 = Glucose3 )
data1
n1 <- 20
ID1 <- rep( "A", n1 )
Let1 <- c( "A","B","C","G","X","V","Y","Z")
Gender1 <- rep( "M", n1 )
Age <- round( rnorm(n1, 30, 2), 0 )
Glucose1 <- rep( 0, n1 )
Glucose2 <- rep( 0, n1 )
Glucose3 <- rep( 0, n1 )
n01 <- cumsum( rpois( n1, 3 ) ) + 100
Treat1 <- rep( c("Y","Y","N","N") , 5 )
for( i in 1:n1 ){
ID1t <- sample( Let1, 1, replace = TRUE )
ID2t <- sample( Let1, 1, replace = TRUE )
ID3t <- sample( Let1, 1, replace = TRUE )
ID4t <- sample( Let1, 1, replace = TRUE )
ID1[i] <- paste( ID1t, ID2t, ID3t, n01[i], ID4t, sep = "" )
Gender1[i] <- ifelse( i %% 2 ==0, "M","F")
Glucose1[i] <- round( rnorm(1, 150, 10),0)
Glucose2[i] <- round( Glucose1[i] + rnorm(1, 0, 1) - 10*ifelse( Treat1[i] == "Y", 1, 0 ), 0 )
Glucose3[i] <- round( Glucose2[i] + rnorm(1, 0, 1) - 5*ifelse( Treat1[i] == "Y", 1, 0 ), 0 )
}
data1 <- data.frame( ID = ID1, Sex = Gender1, Age = Age, Glucose1 = Glucose1,
Glucose2 = Glucose2, Glucose3 = Glucose3 )
data1
data1 <- data.frame( ID = ID1, Sex = Gender1, Age = Age, TRT = Treat1, Glucose1 = Glucose1,
Glucose2 = Glucose2, Glucose3 = Glucose3 )
data1
(0.95)*(0.04)/( (0.95)*(0.04) + (0.02)*0.96)
1 - 0.23 - 0.12 - 0.42
0.02*0.23 + 0.06*0.12 + 0.01*0.42+0.03*0.23
0.02*0.23
0.0046/0.0229
0.06*0.12
0.0072/0.0229
0.01*0.42
0.0042/0.0229
1 - 0.2008 - 0.3144 - 0.1834
x1 <- seq( 0, 1, by = 0.1 )
y1 <- sqrt( x1*(1-x1)/1000)
cbind( x1, y1)
pbeta(0.1,2,20)
pbeta(0.1,2,25)
pbeta(0.1,2,20)
pbeta(0.1,2,10)
pbeta(0.1,2,15)
pbeta(0.1,2,16)
pbeta(0.1,2,16)
232 + 16 - 26
pbeta(0.1,28,222)
1-pbeta(0.1,28,222)
(1-pbeta(0.1,28,222))/pbeta(0.1,28,222)
232 + 1 - 26
pbeta(0.1, 27, 207)
1-pbeta(0.1, 27, 207)
(0.05/1.96)^2
( 0.1*0.9/00065 - 1 )*0.1
( 0.1*0.9/0.00065 - 1 )*0.1
( 0.1*0.9/0.00065 - 1 )*0.9
( 0.1*0.9/0.0006 - 1 )*0.1
( 0.1*0.9/0.0006 - 1 )*0.9
# Is the comment code
# Anything after # will not be run
pbeta( 0.1, 1, 1 )
pbeta( 0.1, 2, 1 )
pbeta( 0.1, 2, 10 )
pbeta( 0.1, 2, 12 )
pbeta( 0.1, 2, 15 )
# Is the comment code
# Anything after # will not be run
pbeta( 0.1, 2, 16 )
pbeta( 0.1, 4, 32 )
pbeta( 0.1, 4, 35 )
pbeta( 0.1, 4, 34 )
pbeta( 0.1, 4, 33 )
x1 <- seq( 0, 1, by = 0.001 )
x1 <- seq( 0, 1, by = 0.001 )
x1
plot( x1, y1 )
# Try another version with 4 as alpha
pbeta( 0.1, 4, 33 )
# Make a plot of this....
x1 <- seq( 0, 1, by = 0.001 )
# '<-" assignment operator
y1 <- dbeta( x1, 2, 16 )
# dbeta is the density for beta
plot( x1, y1 )
plot( x1, y1,
type = "l",    # "l" l as is in lambda
xlab = "x",    # xlabel
ylab = "f(x)"  # ylabel
)
# Make a plot of this....
x1 <- seq( 0, 1, by = 0.001 )
# '<-" assignment operator
y1 <- dbeta( x1, 2, 16 )
# dbeta is the density for beta
plot( x1, y1,
type = "l",    # "l" l as is in lambda
xlab = "x",    # xlabel
ylab = "f(x)"  # ylabel
)
lines( x1, dbeta( x1, 4, 33), col = "red")
# Make a plot of this....
x1 <- seq( 0, 1, by = 0.001 )
# '<-" assignment operator
y1 <- dbeta( x1, 2, 16 )
# dbeta is the density for beta
plot( x1, dbeta( x1, 4, 33),
type = "l",    # "l" l as is in lambda
xlab = "x",    # xlabel
ylab = "f(x)"  # ylabel
)
lines( x1, y1, col = "red")
install.packages("extraDistr")
rbbinom( 10, 1, 28, 222 )
########################################
# Beta Binomial distribution
########################################
library( extraDistr )
# rbbinom( nSamp, 1, alpha, beta )
# alpha and beta from your posterior
rbbinom( 10, 1, 28, 222 )
# rbbinom( nSamp, 1, alpha, beta )
# alpha and beta from your posterior
rbbinom( 10, 1, 28, 222 )
# rbbinom( nSamp, 1, alpha, beta )
# alpha and beta from your posterior
rbbinom( 10, 1, 28, 222 )
# rbbinom( nSamp, 1, alpha, beta )
# alpha and beta from your posterior
rbbinom( 10, 1, 28, 222 )
# rbbinom( nSamp, 1, alpha, beta )
# alpha and beta from your posterior
rbbinom( 10, 1, 2, 16 )
# rbbinom( nSamp, 1, alpha, beta )
# alpha and beta from your posterior
rbbinom( 10, 1, 2, 16 )
rbbinom( 10, 1, 2, 16 )
dbbinom( 0, 1, 28, 222 )
dbbinom( 1, 1, 28, 222 )
?dbetabinom
?dbbinom
library( extraDistr )
library( extraDistr )
dbbinom( 5, 20, 84, 276 )
dpois( 45, 40 )
1 - ppois( 45, 40 )
1 - pgamma( 30, 210, 10 )
qgamma( 0.95, 210, 10 )
########
# Simple Plotting
x1 <- seq( 0, 20, by = 0.01 )
y1 <- dgamma( x1, 1, 1/20 )
plot( x1, y1 )
########
# Simple Plotting
x1 <- seq( 0, 50, by = 0.01 )
y1 <- dgamma( x1, 1, 1/20 )
plot( x1, y1 )
########
# Simple Plotting
x1 <- seq( 0, 50, by = 0.01 )
y1 <- dgamma( x1, 1, 1/20 )
plot( x1, y1,
type = "l")
plot( x1, y1,
type = "l",
col = "dodgerblue")
##############################################################################
########
# Simple Plotting
x1 <- seq( 0, 50, by = 0.01 )
y1 <- dgamma( x1, 1, 1/20 )
plot( x1, y1,
type = "l",             # "l" lambda = line
col = "dodgerblue",
lwd = 3   )              # Line width
########
# Simple Plotting
x1 <- seq( 0, 50, by = 0.01 )
y1 <- dgamma( x1, 1, 1/20 )
plot( x1, y1,
type = "l",             # "l" lambda = line
col = "dodgerblue",
lwd = 3,
xlab = 'x',
ylab = 'f(x)')              # Line width
########
# Simple Plotting
x1 <- seq( 0, 50, by = 0.01 )
y1 <- dgamma( x1, 1, 1/20 )
y2 <- dgamma( x1, 10, 0.67)
plot( x1, y1,
type = "l",             # "l" lambda = line
col = "dodgerblue",
lwd = 3,
xlab = 'x',
ylab = 'f(x)')              # Line width
lines( x1, y2, col = "seagreen" )
########
# Simple Plotting
x1 <- seq( 0, 50, by = 0.01 )
y1 <- dgamma( x1, 1, 1/20 )
y2 <- dgamma( x1, 10, 0.67)
plot( x1, y2,
type = "l",             # "l" lambda = line
col = "dodgerblue",
lwd = 3,
xlab = 'x',
ylab = 'f(x)')              # Line width
lines( x1, y1, col = "seagreen" )
qgamma( c(0.025, 0.975), 10, 0.67 )
1/qgamma( c(0.025, 0.975), 10, 0.67 )
qgamma( c( 0.025, 0.975), 10, 0.67 )
samp1 <- rgamma( 10000, 10, 0.67 )
quantile( samp1, c( 0.025, 0.975) )
samp1 <- rgamma( 100000, 10, 0.67 )
quantile( samp1, c( 0.025, 0.975) )
samp1
rexp( 1, 16.213685 )
hist( samp1 )
hist( samp1 )
lines( x1, y2, col = "blue")
hist( samp1, freq = FALSE )
lines( x1, y2, col = "blue")
pred1 <- rexp( 1, samp1 )
pred1 <- rexp( 100000, samp1 )
pred1
hist( pred1 )
quantile( pred1, c( 0.025, 0.975) )
quantile( pred1, c( 0.025, 0.975) )*3600
hist(pred1*3600)
plot( density( pred1 ) )
plot( density( samp1 ) )
lines( x1, y2, col = "blue")
qgamma( c(0.025, 0.5, 0.975), 10, 0.6697 )
install.packages("dadjoke")
library(dadjoke)
dadjoke()
dadjoke()
dadjoke()
#
# Simple arithmetic
4 + 6
4*6
4/6
4 - 6
4^6
a1 <- 5    # The assignment operator is "<-" (no spaces)
b1 = 6     # You can use "=" as well
a1 + b1
c1 <- a1 + b1
d1 <- c( 5, 0, 9, 8, 4, 12 )
e1 <- c( "Noah", "Graham", "Charles", "Abi", "Luci", "Dika")
# What about mixed data types?
f1 <- c( "Noah", 1, "Dika", 5 )
f1
e1
g1 <- c("Saloni","Yuting")
h1 <- data.frame( Name = e1, Cash = d1 )
h1
View(h1)
Name1 <- c( "Trey", "Nick", "Rishi", "Ria", "Jessie")
Years1 <- c( 3, 3, 1, 4, 2 )
Car1 <- c( TRUE, TRUE, TRUE, TRUE, TRUE )
data1 <- data.frame( Name = Name1,
Years = Years1,
Car = Car1 )
View(data1)
# How to measure the size of a vector
length( Name1 )
length( Car1 )
length( data1 )
dim( data1 )
dim( Name1 )
########################################################
#
# R is filled with all sorts of statistical functions!
#
mean( Years1 )
sd( Years1 )
summary( Years1 )
#Install the package
install.packages("qcc")
library( qcc )
data(pistonrings)
attach(pistonrings)
diameter <- qcc.groups(diameter, sample)
q <- cusum(diameter[1:25,], decision.interval = 4, se.shift = 1)
summary(q)
pistonrings
detach(pistonrings)
data(pistonrings)
View(pistonrings)
# Test data...
rand1 <- runif( 100,0,1)
x1 <- round( rnorm(100,10,1))
y1 <- round( 0.5*x1 + rnorm(100,0,.01))
y1 <- y1 + ifelse( rand1 < 0.01, 1, 0 )
qc1 <- data.frame( x = x1, y = y1, sample = rep(1:10,10), trial = TRUE )
?cusum
q <- cusum( qc1, decision.interval =4, se.shift = 1 )
qc2 <- qcc.groups( qc1, sample )
# Set the working directory
# setwd("/Volumes/GoogleDrive/.shortcut-targets-by-id/1ZaD4u22lYjzvmqq5twsPvWU3ecPu4pkq/Working Group /SoilMoistureExample/Model_ANN")
#setwd("G:/.shortcut-targets-by-id/1ZaD4u22lYjzvmqq5twsPvWU3ecPu4pkq/Working Group/SoilMoistureExample/Model_ANN")
setwd("C:/Users/Ed/Documents/GitHub/explainableAI_Environmetrics/ANN")
library(tidyverse)
library(fields)
library(broom)
library(gridExtra)
library(glmnet)
library(lubridate)
library(modelr)
theme_set(theme_classic(base_size = 25))
# Individual Month Plots
# For Raw 2015
x1 <- read.csv( "Plots/ANNDerivRAWFeb_to_May_Ratio2015.csv")
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z0, months = "January" )
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2015 May (RAW) ", R[pred]^{2}," = 0.364")))
#facet_wrap(. ~ months)
print(p)
# Individual Month Plots
# For Raw 2015
x1 <- read.csv( "Plots/ANNDerivRAWFeb_to_May_Ratio2014.csv")
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2014 May (RAW) ", R[pred]^{2}," = 0.608")))
#facet_wrap(. ~ months)
print(p)
png("figures/Pred_Feb_to_May_Ratio2014.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2014 May (RAW) ", R[pred]^{2}," = 0.608")))
#facet_wrap(. ~ months)
print(p)
dev.off()
# For Raw 2015
x1 <- read.csv( "Plots/ANNDerivRAWFeb_to_May_Ratio2015.csv")
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z0, months = "January" )
png("figures/Pred_Feb_to_May_Ratio2015.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2015 May (RAW) ", R[pred]^{2}," = 0.364")))
#facet_wrap(. ~ months)
print(p)
dev.off()
# For Raw 2016
x1 <- read.csv( "Plots/ANNDerivRAWFeb_to_May_Ratio2016.csv")
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z0, months = "January" )
png("figures/Pred_Feb_to_May_Ratio2016.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2016 May (RAW) ", R[pred]^{2}," = 0.431")))
#facet_wrap(. ~ months)
print(p)
dev.off()
##########################################################
# Individual Month Plots
# For PCA60 2014
x1 <- read.csv( "Plots/ANNDeriv_Feb_to_May_Ratio2014.csv")
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z0, months = "January" )
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2014 May (",PCA[60],") ", R[pred]^{2}," = 0.538")))
#facet_wrap(. ~ months)
print(p)
png("figures/Pred_PCA_Feb_to_May_Ratio2014.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2014 May (",PCA[60],") ", R[pred]^{2}," = 0.538")))
#facet_wrap(. ~ months)
print(p)
dev.off()
# For PCA60 2015
x1 <- read.csv( "Plots/ANNDeriv_Feb_to_May_Ratio2015.csv")
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z0, months = "January" )
png("figures/Pred_PCA_Feb_to_May_Ratio2015.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2015 May (",PCA[60],") ", R[pred]^{2}," = 0.468")))
#facet_wrap(. ~ months)
print(p)
dev.off()
# For PCA60 2016
x1 <- read.csv( "Plots/ANNDeriv_Feb_to_May_Ratio2016.csv")
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z0, months = "January" )
png("figures/Pred_PCA_Feb_to_May_Ratio2016.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("2016 May (",PCA[60],") ", R[pred]^{2}," = 0.329")))
#facet_wrap(. ~ months)
print(p)
dev.off()
x1 <- read.csv( "plots/ANNDerivWideRatioRaw.csv")
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z2, months = "January" )
png("figures/PredOct_ratio.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("February to May (RAW Wide)")),
subtitle = "October")
#facet_wrap(. ~ months)
print(p)
dev.off()
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z5, months = "January" )
png("figures/PredJan_ratio.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("February to May (RAW Wide)")),
subtitle = "January")
#facet_wrap(. ~ months)
print(p)
dev.off()
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z3, months = "January" )
png("figures/PredNov_ratio.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("February to May (RAW Wide)")),
subtitle = "November")
#facet_wrap(. ~ months)
print(p)
dev.off()
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z6, months = "January" )
png("figures/PredFeb_ratio.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("February to May (RAW Wide)")),
subtitle = "February")
#facet_wrap(. ~ months)
print(p)
dev.off()
d1 <- data.frame(Lon = x1$X, Lat = x1$Y, MSPEratio = x1$Z4, months = "January" )
png("figures/PredDec_ratio.png",width=960,height=360)
p = d1 %>%
ggplot() +
geom_point(aes(x=Lon,y=Lat,col=MSPEratio)) +
scale_color_viridis_c(direction=1) +
ggtitle(label = expression(paste("February to May (RAW Wide)")),
subtitle = "December")
#facet_wrap(. ~ months)
print(p)
dev.off()
install.packages(c("tidyverse", "fields", "broom", "gridExtra", "glmnet", "lubridate", "modelr"))
library(tidyverse)
library(fields)
library(broom)
library(gridExtra)
library(glmnet)
library(lubridate)
library(modelr)
theme_set(theme_classic(base_size = 25))
# Set the working directory
# setwd("/Volumes/GoogleDrive/.shortcut-targets-by-id/1ZaD4u22lYjzvmqq5twsPvWU3ecPu4pkq/Working Group /SoilMoistureExample/Model_ANN")
#setwd("G:/.shortcut-targets-by-id/1ZaD4u22lYjzvmqq5twsPvWU3ecPu4pkq/Working Group/SoilMoistureExample/Model_ANN")
setwd("C:/Users/Ed/Documents/GitHub/explainableAI_Environmetrics/ANN")
setwd("G:/.shortcut-targets-by-id/1ZaD4u22lYjzvmqq5twsPvWU3ecPu4pkq/Working Group/SoilMoistureExample/Model_ANN")
setwd("C:/Users/Ed/Documents/GitHub/explainableAI_Environmetrics/ANN")
SoilMoisture.all <- read.csv("../Soil.csv", header = T) %>%
tibble::rowid_to_column("sm_loc_id")
head(SoilMoisture.all)
SoilMoisture.all <- read.csv("../Soil.csv", header = T)
head( SoilMoisture.all)
SoilMoisture <- read.csv("../Soil.csv", header = TRUE )
head( SoilMoisture)
SoilMoisture2 <- read.csv( "cornbelt.csv", header = TRUE )
names( SoilMoisture2 )[1:10]
SoilMoisture2[1:10,1:10]
SoilMoisture[1:10,1:10]
x1 <- read.csv( "plots/ANNDerivWideRatioRaw.csv")
head( x1)
